<?xml version="1.0"?>
<ruleset name="teranex PMD ruleset" xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation=" http://pmd.sf.net/ruleset_xml_schema.xsd">
    <description>teranex PMD ruleset</description>


    <!--
                                         CLEAN CODE

         The Clean Code ruleset contains rules that enforce a clean code base. This includes rules from SOLID and object calisthenics.
     -->


    <!--
    A boolean flag argument is a reliable indicator for a violation of the Single Responsibility Principle (SRP). 
    You can fix this problem by extracting the logic in the boolean flag into its own class or method.
    -->
    <rule ref="rulesets/cleancode.xml/BooleanArgumentFlag"/>
    <!--
    An if expression with an else branch is never necessary. 
    You can rewrite the conditions in a way that the else is not necessary and the code becomes simpler to read. 
    To achieve this use early return statements. 
    To achieve this you may need to split the code it several smaller methods. For very simple assignments you could also use the ternary operations.
    -->
    <!--<rule ref="rulesets/cleancode.xml/ElseExpression" />-->
    <!-- 
    Static access causes unexchangeable dependencies to other classes and leads to hard to test code. 
    Avoid using static access at all costs and instead inject dependencies through the constructor. 
    The only case when static access is acceptable is when used for factory methods.
    -->
    <!--<rule ref="rulesets/cleancode.xml/StaticAccess">
        <properties>-->
    <!-- Comma-separated class name list of exceptions --><!--
            <property name="exceptions" value="" />
        </properties>
    </rule>-->


    <!--               
                                                CODE SIZE                
                                                
            The Code Size Ruleset contains a collection of rules that find code size related problems.
                                                
    -->

    <!-- 
    Complexity is determined by the number of decision points in a method plus one for the method entry. 
    The decision points are 'if', 'while', 'for', and 'case labels'. 
    Generally, 1-4 is low complexity, 5-7 indicates moderate complexity, 8-10 is high complexity, and 11+ is very high complexity. 
    -->
    <rule ref="rulesets/codesize.xml/CyclomaticComplexity">
        <properties>
            <!-- The Cyclomatic Complexity reporting threshold -->
            <property name="reportLevel" value="7"/>
            <!-- Indicate if class average violation should be added to the report -->
            <property name="showClassesComplexity" value="true"/>
            <!-- Indicate if class average violation should be added to the report -->
            <property name="showMethodsComplexity" value="true"/>
        </properties>
    </rule>

    <!-- 
    The NPath complexity of a method is the number of acyclic execution paths through that method. 
    A threshold of 200 is generally considered the point where measures should be taken to reduce complexity.
    -->
    <rule ref="rulesets/codesize.xml/NPathComplexity">
        <properties>
            <!-- The npath reporting threshold -->
            <property name="minimum" value="200"/>
        </properties>
    </rule>

    <!--
    Violations of this rule usually indicate that the method is doing too much. 
    Try to reduce the method size by creating helper methods and removing any copy/pasted code.
    -->
    <rule ref="rulesets/codesize.xml/ExcessiveMethodLength">
        <properties>
            <!-- The method size reporting threshold -->
            <property name="minimum" value="100"/>
            <!-- Count whitespace in reporting threshold -->
            <property name="ignore-whitespace" value="false"/>
        </properties>
    </rule>

    <!--
   Long Class files are indications that the class may be trying to do too much.
   Try to break it down, and reduce the size to something manageable.
    -->
    <rule ref="rulesets/codesize.xml/ExcessiveClassLength">
        <properties>
            <!-- The method size reporting threshold -->
            <property name="minimum" value="500"/>
            <!-- Count whitespace in reporting threshold -->
            <property name="ignore-whitespace" value="false"/>
        </properties>
    </rule>

    <!--
   Long parameter lists can indicate that a new object should be created to wrap the numerous parameters. 
   Basically, try to group the parameters together.
    -->
    <rule ref="rulesets/codesize.xml/ExcessiveParameterList">
        <properties>
            <!--The parameter count reporting threshold -->
            <property name="minimum" value="6"/>
        </properties>
    </rule>

    <!--
   A large number of public methods and attributes declared in a class can indicate the 
   class may need to be broken up as increased effort will be required to thoroughly test it.
    -->
    <rule ref="rulesets/codesize.xml/ExcessivePublicCount">
        <properties>
            <!-- The public item reporting threshold -->
            <property name="minimum" value="50"/>
        </properties>
    </rule>

    <!--
   Classes that have too many fields could be redesigned to have fewer fields, 
   possibly through some nested object grouping of some of the information. 
   For example, a class with city/state/zip fields could instead have one Address field.
    -->
    <rule ref="rulesets/codesize.xml/TooManyFields">
        <properties>
            <!-- The field count reporting threshold -->
            <property name="maxfields" value="50"/>
        </properties>
    </rule>

    <!--
   A class with too many methods is probably a good suspect for refactoring, 
   in order to reduce its complexity and find a way to have more fine grained objects. 
   By default it ignores methods starting with 'get' or 'set'. 
   The default was changed from 10 to 25 in PHPMD 2.3.
    -->
    <rule ref="rulesets/codesize.xml/TooManyMethods">
        <properties>
            <!-- The method count reporting threshold -->
            <property name="maxmethods" value="25"/>
            <!-- Ignore methods matching this regex -->
            <property name="ignorepattern" value="(^(set|get))i"/>
        </properties>
    </rule>

    <!--
   A class with too many public methods is probably a good suspect for refactoring,
   in order to reduce its complexity and find a way to have more fine grained objects. 
   By default it ignores methods starting with 'get' or 'set'.
    -->
    <rule ref="rulesets/codesize.xml/TooManyPublicMethods">
        <properties>
            <!-- The method count reporting threshold -->
            <property name="maxmethods" value="6"/>
            <!-- Ignore methods matching this regex -->
            <property name="ignorepattern" value="(^(set|get))i"/>
        </properties>
    </rule>

    <!--
   The Weighted Method Count (WMC) of a class is a good indicator of how much time and effort is required to modify and maintain this class. 
   The WMC metric is defined as the sum of complexities of all methods declared in a class. 
   A large number of methods also means that this class has a greater potential impact on derived classes.
    -->
    <rule ref="rulesets/codesize.xml/ExcessiveClassComplexity">
        <properties>
            <!-- The maximum WMC tolerable for a class. -->
            <property name="maximum" value="50"/>

        </properties>
    </rule>

    <!--

                                     Controversial

             This ruleset contains a collection of controversial rules.

     -->

    <!--
     Accessing a super-global variable directly is considered a bad practice.
     These variables should be encapsulated in objects that are provided by a framework, for instance.
    -->
    <rule ref="rulesets/controversial.xml/Superglobals"/>

    <!--
     It is considered best practice to use the CamelCase notation to name classes.
    -->
    <rule ref="rulesets/controversial.xml/CamelCaseClassName"/>

    <!--
     It is considered best practice to use the camelCase notation to name attributes.
    -->
    <rule ref="rulesets/controversial.xml/CamelCasePropertyName">
        <properties>
            <!-- Allow an optional, single underscore at the beginning. -->
            <property name="allow-underscore" value="false"/>
            <!-- Is it allowed to have underscores in test method names. -->
            <property name="allow-underscore-test" value="false"/>
        </properties>
    </rule>

    <!--
     It is considered best practice to use the camelCase notation to name methods.
    -->
    <rule ref="rulesets/controversial.xml/CamelCaseMethodName">
        <properties>
            <!-- Allow an optional, single underscore at the beginning. -->
            <property name="allow-underscore" value="false"/>
            <!-- Is it allowed to have underscores in test method names. -->
            <property name="allow-underscore-test" value="false"/>
        </properties>
    </rule>

    <!--
     It is considered best practice to use the camelCase notation to name parameters.
    -->
    <rule ref="rulesets/controversial.xml/CamelCaseParameterName"/>

    <!--
     It is considered best practice to use the camelCase notation to name variables.
    -->
    <rule ref="rulesets/controversial.xml/CamelCaseVariableName"/>
	
	    <!--
                                         Design

             The Design Ruleset contains a collection of rules that find software design related problems.
     -->

    <!--
     An exit-expression within regular code is untestable and therefore it should be avoided.
     Consider to move the exit-expression into some kind of startup script where an error/exception
     code is returned to the calling environment.
    -->
    <rule ref="rulesets/design.xml/ExitExpression"/>

    <!--
     An eval-expression is untestable, a security risk and bad practice.
     Therefore it should be avoided. Consider to replace the eval-expression with regular code.
    -->
    <rule ref="rulesets/design.xml/EvalExpression"/>

    <!--
     Goto makes code harder to read and it is nearly impossible to understand the control flow of an application that uses this language construct.
     Therefore it should be avoided.
     Consider to replace Goto with regular control structures and separate methods/function, which are easier to read.
    -->
    <rule ref="rulesets/design.xml/GotoStatement"/>

    <!--
     A class with an excessive number of children is an indicator for an unbalanced class hierarchy.
     You should consider to refactor this class hierarchy.
    -->
    <rule ref="rulesets/design.xml/NumberOfChildren">
        <properties>
            <!-- Maximum number of acceptable child classes. -->
            <property name="minimum" value="15"/>
        </properties>
    </rule>

    <!--
    A class with many parents is an indicator for an unbalanced and wrong class hierarchy.
    You should consider to refactor this class hierarchy.
    -->
    <rule ref="rulesets/design.xml/DepthOfInheritance">
        <properties>
            <!-- Maximum number of acceptable parent classes. -->
            <property name="minimum" value="4"/>
        </properties>
    </rule>

    <!--
    A class with too many dependencies has negative impacts on several quality aspects of a class.
    This includes quality criteria like stability, maintainability and understandability
    -->
    <rule ref="rulesets/design.xml/CouplingBetweenObjects">
        <properties>
            <!-- Maximum number of acceptable dependencies. -->
            <property name="minimum" value="13"/>
        </properties>
    </rule>

    <!--
     Functions like var_dump(), print_r() etc. are normally only used during development and
     therefore such calls in production code are a good indicator that they were just forgotten.
    -->
    <rule ref="rulesets/design.xml/DevelopmentCodeFragment">
        <properties>
            <!--  Comma separated list of suspect function images -->
            <property name="unwanted-functions"
                      value="var_dump,print_r,debug_zval_dump,debug_print_backtrace,pr,debug"/>
        </properties>
    </rule>
	
	<!--
                                             NAMING

             The Naming Ruleset contains a collection of rules about names - too long, too short, and so forth.

     -->

    <!--
        Detects when a field, local, or parameter has a very short name.
    -->
    <rule ref="rulesets/naming.xml/ShortVariable">
        <properties>
            <property name="minimum" value="3"/>
            <property name="exceptions" value="id"/>
        </properties>
    </rule>

    <!--
        Detects when a field, formal or local variable is declared with a long name.
    -->
    <rule ref="rulesets/naming.xml/LongVariable">
        <properties>
            <!-- The variable length reporting threshold -->
            <property name="maximum" value="60"/>
        </properties>
    </rule>

    <!--
        Detects when very short method names are used.
    -->
    <rule ref="rulesets/naming.xml/ShortMethodName">
        <properties>
            <!-- The variable length reporting threshold -->
            <property name="minimum" value="4"/>
            <!-- Comma-separated list of exceptions -->
            <property name="exceptions" value=""/>
        </properties>
    </rule>

    <!--
        A constructor method should not have the same name as the enclosing class, 
        consider to use the PHP 5 __construct method.
    -->
    <rule ref="rulesets/naming.xml/ConstructorWithNameAsEnclosingClass"/>

    <!--
        Class/Interface constant names should always be defined in uppercase.
    -->
    <rule ref="rulesets/naming.xml/ConstantNamingConventions"/>

    <!--
        Looks for methods named 'getX()' with 'boolean' as the return type. 
        The convention is to name these methods 'isX()' or 'hasX()'.
    -->
    <rule ref="rulesets/naming.xml/BooleanGetMethodName">
        <properties>
            <!-- Applies only to methods without parameter when set to true -->
            <property name="checkParameterizedMethods" value="false"/>
        </properties>
    </rule>


    <!--
                                       Unused Code Rules

           The Unused Code Ruleset contains a collection of rules that find unused code.
   -->

    <!--
     Detects when a private field is declared and/or assigned a value, but not used.
    -->
    <rule ref="rulesets/unusedcode.xml/UnusedPrivateField"/>

    <!--
     Detects when a local variable is declared and/or assigned, but not used.
    -->
    <rule ref="rulesets/unusedcode.xml/UnusedLocalVariable">
        <properties>
            <!-- Allow unused variables in foreach language constructs. -->
            <property name="allow-unused-foreach-variables" value="false"/>
        </properties>
    </rule>

    <!--
     Unused Private Method detects when a private method is declared but is unused.
    -->
    <rule ref="rulesets/unusedcode.xml/UnusedPrivateMethod"/>
    <!--
     Avoid passing parameters to methods or constructors and then not using those parameters.
    -->
    <rule ref="rulesets/unusedcode.xml/UnusedFormalParameter"/>

</ruleset>

